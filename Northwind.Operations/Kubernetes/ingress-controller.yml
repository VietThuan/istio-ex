---
# NAMEPSPACE ####################################################################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: ingress

---
# DEFAULT BACKEND DEPLOYMENT ####################################################################################################
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ingress
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      namespace: ingress
      name: default-http-backend
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-http-backend
          image: "gcr.io/google_containers/defaultbackend:1.4"
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5

---
# DEFAULT BACKEND SERVICE #######################################################################################################
apiVersion: v1
kind: Service
metadata:
  namespace: ingress
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  selector:
    app: default-http-backend
  ports:
    - port: 80
      targetPort: 8080

---
# CONFIG MAP ####################################################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ingress
  name: nginx-configuration
  labels:
    app: ingress

---
# TCP SERVICE CONFIG MAP ########################################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ingress
  name: tcp-services

---
# UDP SERVICES CONFIG MAP #######################################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ingress
  name: udp-services

---
# SERVICE ACCOUNT ###############################################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ingress
  name: ingress-service-account
  
---
# CLUSTER ROLE ##################################################################################################################
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ingress-cluster-role
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
# ROLE ##########################################################################################################################
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  namespace: ingress
  name: ingress-role
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
# ROLE BINDING ##################################################################################################################
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  namespace: ingress
  name: ingress-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-role
subjects:
  - kind: ServiceAccount
    namespace: ingress
    name: ingress-service-account

---
# CLUSTER ROLE BINDING ##########################################################################################################
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ingress-cluster-role-binding
roleRef:
  name: ingress-cluster-role
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  
subjects:
  - kind: ServiceAccount
    namespace: ingress
    name: ingress-service-account

---
# DAEMON SET ####################################################################################################################
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  namespace: ingress
  name: ingress-controller
spec:
  selector:
    matchLabels:
      app: ingress-controller
  template:
    metadata:
      labels:
        app: ingress-controller
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: ingress-service-account
      hostNetwork: true
      containers:
        - name: ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.14.0
          args:
            - /ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
            hostPort: 80
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            runAsNonRoot: false

---
# INGRESS SERVICE ###############################################################################################################
apiVersion: v1
kind: Service
metadata:
  namespace: ingress
  name: ingress-controller
spec:
  selector:
    app: ingress-controller
  type: LoadBalancer
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80